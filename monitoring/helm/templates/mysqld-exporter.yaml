{{- $ns := .Values.namespace }}
{{- with .Values.exporters.mysql }}
{{- range .instances }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysqld-exporter-{{ .name }}-config
  namespace: {{ $ns }}
data:
  .my.cnf: |
    [client]
    user={{ .user }}
    password={{ .password }}
    host={{ .host }}
    port={{ .port }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysqld-exporter-{{ .name }}
  namespace: {{ $ns }}
spec:
  replicas: {{ $.Values.exporters.mysql.replicas }}
  selector:
    matchLabels: { app: mysqld-exporter-{{ .name }} }
  template:
    metadata:
      labels: { app: mysqld-exporter-{{ .name }} }
    spec:
      containers:
        - name: mysqld-exporter
          image: {{ $.Values.exporters.mysql.image }}
          args: [ "--config.my-cnf=/etc/mysqld-exporter/.my.cnf" ]
          ports: [ { containerPort: {{ $.Values.exporters.mysql.port }} } ]
          volumeMounts:
            - name: mysql-config
              mountPath: /etc/mysqld-exporter/.my.cnf
              subPath: .my.cnf
          resources:
{{ toYaml $.Values.exporters.mysql.resources | indent 12 }}
      volumes:
        - name: mysql-config
          configMap: { name: mysqld-exporter-{{ .name }}-config }
---
apiVersion: v1
kind: Service
metadata:
  name: mysqld-exporter-{{ .name }}
  namespace: {{ $ns }}
  labels:
{{ toYaml $.Values.exporters.mysql.service.labels | indent 4 }}
  annotations:
{{ toYaml $.Values.exporters.mysql.service.annotations | indent 4 }}
spec:
  type: {{ $.Values.exporters.mysql.service.type }}
  selector: { app: mysqld-exporter-{{ .name }} }
  ports:
    - name: http
      port: {{ $.Values.exporters.mysql.port }}
      targetPort: {{ $.Values.exporters.mysql.port }}
{{- end }}
{{- end }}
